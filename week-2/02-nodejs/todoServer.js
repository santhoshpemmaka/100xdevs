/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());

// Each todo has a title and a description. The title is a string and the description is a string.
// Each todo should also get an unique autogenerated id every time it is created
// The expected API endpoints are defined below,
  
//      1.GET /todos - Retrieve all todo items
//     Description: Returns a list of all todo items.
//     Response: 200 OK with an array of todo items in JSON format.
//     Example: GET http://localhost:3000/todos

let todoList = [];

// Get /todos - Retrieve all todo items.

app.get('/todos', (req, res) => {
    
    return res.status(200).json(todoList);
    
});

// 2.GET /todos/:id - Retrieve a specific todo item by ID
// Description: Returns a specific todo item identified by its ID.
// Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
// Example: GET http://localhost:3000/todos/123

const findTodoById = (id) => {
    console.log("id", id);
    const findIndex = todoList.findIndex(todo => todo.id == id);
    console.log("findIndex", findIndex);
    return findIndex;
}

app.get('/todos/:id', (req, res) => {
    const Id = req.params.id;
    const resultIndex = findTodoById(Id);
    if (resultIndex != -1) {
        return res.status(200).json(todoList[resultIndex]
        )
    }
    else {
        return res.status(404).send();
    }
});

// 3. POST /todos - Create a new todo item
// Description: Creates a new todo item.
// Request Body: JSON object representing the todo item.
// Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
// Example: POST http://localhost:3000/todos
// Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

app.post('/todos', (req, res) => {
    const body = req.body;
    const title = body.title;
    const description = body.description;
    const completed = false;
    const id = parseInt(Math.random() * 1000);
    if (!title && !description && !completed && !id) {
        return res.status(400).json({
            data: "Please give all mandatory fields"
        })
    }
    else {
        const resultData = {
            id,
            title,
            description,
            completed
        }
        todoList.push(resultData);
        return res.status(201).json(resultData);
    }
})


// 4. PUT /todos/:id - Update an existing todo item by ID
// Description: Updates an existing todo item identified by its ID.
// Request Body: JSON object representing the updated todo item.
// Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
// Example: PUT http://localhost:3000/todos/123
// Request Body: { "title": "Buy groceries", "completed": true }

const updateTodoList = (id) => {

    const resultTodo = todoList.map((todo) => {
        if (todo.id == id) {
            return { ...todo, completed: true };
        }
        else {
            return todo;
        }
    })
    todoList = resultTodo;
}

app.post('/todos/:id', (req, res) => {
    const id = req.params.id;
    const todoIndex = todoList.findIndex((todo) => todo.id == id);
    if (todoIndex != -1) {
        todoList[todoIndex].title = req.body.title;
        todoList[todoIndex].description = req.body.description;
        res.status(200).json(todoList[todoIndex]);
    }
    else {
        return res.status(404).json();
    }
});


// 5. DELETE /todos/:id - Delete a todo item by ID
// Description: Deletes a todo item identified by its ID.
// Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
// Example: DELETE http://localhost:3000/todos/123

// - For any other route not defined in the server return 404

app.delete('/todos/:id', (req, res) => {
    const id = req.params.id;
    const todoId = todoList.findIndex(todo => todo.id == id);
    if (todoId != -1) {
        const updateTodoList = todoList.filter((todo) => todo.id != id);
        todoList = updateTodoList;
        return res.status(200).json({
            data : "Todo item was found and deleted"
        })
    }
    else {
        return res.status(404).json({
            data : "Not found!"
        })
    }
})

app.use((req, res, next) => {
    res.status(404).send();
})

    
  
  module.exports = app;